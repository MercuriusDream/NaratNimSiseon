        </div>
        <div className="p-6 md:w-2/3">
          <h3 className="text-xl font-bold text-gray-900 mb-2">{title}</h3>
          <p className="text-sm text-blue-600 font-medium mb-3">{party}</p>
          <p className="text-gray-600">{description}</p>
        </div>
      </div>
    </article>
  );
};

export default ChangeArticle; === ./frontend/src/components/TopNavigation.js ===
import React, { useState } from 'react';

const TopNavigation = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 flex items-center justify-between px-8 py-4 bg-white shadow-md">
      <div className="flex items-center space-x-4">
        <img
          src="/logo.png"
          alt="Logo"
          className="w-10 h-10 rounded-full object-cover"
        />
        <h1 className="text-2xl font-bold text-gray-800">의안 목록</h1>
      </div>
      
      {/* Desktop Navigation */}
      <div className="hidden md:flex items-center space-x-8">
        <a href="/" className="text-gray-600 hover:text-gray-900 transition-colors">홈</a>
        <a href="/parties" className="text-gray-600 hover:text-gray-900 transition-colors">정당 목록</a>
        <a href="/meetings" className="text-gray-600 hover:text-gray-900 transition-colors">회의록 목록</a>
        <a href="/bills" className="text-gray-600 hover:text-gray-900 transition-colors">의안 목록</a>
      </div>

      {/* Mobile Menu Button */}
      <button 
=== ./frontend/src/components/DataMetrics.js ===

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const DataMetrics = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/stats/');
        setStats(response.data);
      } catch (err) {
        console.error('Error fetching stats:', err);
        setError('통계 데이터를 불러오는 중 오류가 발생했습니다.');
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  if (loading) {
    return (
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
=== ./frontend/src/components/NavigationHeader.js ===

import React from 'react';
import { useLocation } from 'react-router-dom';

const NavigationHeader = () => {
  const location = useLocation();

  const isActive = (path) => {
    return location.pathname === path;
  };

  return (
    <header className="flex overflow-hidden absolute inset-x-0 top-0 z-50 flex-wrap gap-5 justify-center items-center p-5 w-full h-20 text-black bg-white min-h-20 shadow-[0px_0px_6px_rgba(0,0,0,0.12)] max-md:max-w-full">
      <img
        src="https://cdn.builder.io/api/v1/image/assets/TEMP/0b2e1432406e71917c42b07bf0a2f0d64e8d5b59?placeholderIfAbsent=true&apiKey=004d4d7011224d8cbeadb55d96f39ec2"
        alt="Logo"
        className="object-contain shrink-0 self-stretch my-auto w-10 aspect-square rounded-[100px]"
      />
      <h1 className="flex-1 shrink self-stretch my-auto text-3xl font-medium leading-none basis-0 max-md:max-w-full">
        나랏님 시선
      </h1>
      <nav className="flex gap-10 justify-center items-center self-stretch my-auto text-base bg-white min-w-60">
        <a 
          href="/" 
          className={`self-stretch my-auto transition-colors duration-200 ${
            isActive('/') ? 'text-blue-600 font-semibold' : 'text-gray-700 hover:text-blue-600'
          }`}
        >
          홈
        </a>
=== ./frontend/src/components/HeroSection.js ===

import React from 'react';

const HeroSection = () => {
  return (
    <section className="flex overflow-hidden flex-col items-center px-20 pt-32 pb-20 w-full bg-gradient-to-b from-blue-50 to-white max-md:px-5 max-md:pt-24 max-md:max-w-full">
      <div className="flex flex-col items-center max-w-4xl text-center">
        <h1 className="text-5xl font-bold text-slate-800 leading-tight max-md:text-4xl max-md:leading-tight mb-6">
          대한민국 국회의 모든 것을
          <br />
          <span className="text-blue-600">한눈에 보세요</span>
        </h1>
        <p className="text-xl text-slate-600 leading-relaxed max-w-2xl mb-8">
          국회 의안, 회의록, 정당 정보를 쉽고 빠르게 찾아보세요.
          투명하고 접근 가능한 정치 정보를 제공합니다.
        </p>
        <div className="flex gap-4 max-md:flex-col max-md:w-full">
          <a
            href="/bills"
            className="px-8 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors duration-200"
          >
            의안 둘러보기
          </a>
          <a
            href="/sessions"
            className="px-8 py-3 border-2 border-blue-600 text-blue-600 font-semibold rounded-lg hover:bg-blue-50 transition-colors duration-200"
          >
            회의록 보기
          </a>
        </div>
=== ./frontend/src/components/ContentSection.js ===

import React from 'react';

const ContentSection = ({ title, description, buttonText, buttonLink, children }) => {
  return (
    <section className="flex overflow-hidden flex-col px-20 py-16 w-full bg-white max-md:px-5 max-md:py-12 max-md:max-w-full">
      <div className="flex flex-col w-full max-w-6xl mx-auto">
        <div className="flex flex-wrap gap-5 justify-between items-end mb-12 max-md:max-w-full">
          <div className="flex flex-col max-md:max-w-full">
            <h2 className="text-4xl font-bold text-slate-800 leading-tight max-md:text-3xl mb-4">
              {title}
            </h2>
            <p className="text-lg text-slate-600 leading-relaxed max-w-2xl">
              {description}
            </p>
          </div>
          {buttonText && buttonLink && (
            <a
              href={buttonLink}
              className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors duration-200 min-w-fit"
            >
              {buttonText}
            </a>
          )}
        </div>
        <div className="w-full">
          {children}
        </div>
      </div>
    </section>
=== ./frontend/src/components/Footer.js ===

import React from 'react';

const Footer = () => {
  return (
    <footer className="flex overflow-hidden flex-col px-20 py-16 w-full bg-slate-900 text-white max-md:px-5 max-md:py-12 max-md:max-w-full">
      <div className="flex flex-col w-full max-w-6xl mx-auto">
        <div className="flex flex-wrap gap-12 justify-between max-md:gap-8">
          <div className="flex flex-col max-w-md">
            <h3 className="text-2xl font-bold mb-4">나랏님 시선</h3>
            <p className="text-slate-300 leading-relaxed mb-6">
              대한민국 국회의 투명성을 높이고, 시민들이 정치에 더 쉽게 접근할 수 있도록 돕는 플랫폼입니다.
            </p>
            <div className="flex gap-4">
              <a href="#" className="w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center hover:bg-slate-600 transition-colors">
                <span className="sr-only">Facebook</span>
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                </svg>
              </a>
              <a href="#" className="w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center hover:bg-slate-600 transition-colors">
                <span className="sr-only">Twitter</span>
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                </svg>
              </a>
            </div>
          </div>
          <div className="flex flex-col">
            <h4 className="text-lg font-semibold mb-4">빠른 링크</h4>
=== ./frontend/src/components/BillCard.js ===
import React from 'react';

const BillCard = ({ id, title, description }) => {

  return (
    <div className="flex overflow-hidden flex-col flex-1 shrink p-6 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 basis-0 min-w-64 max-md:max-w-full">
      <div className="flex flex-col h-full">
        <h3 className="text-lg font-bold text-slate-800 leading-tight mb-3 line-clamp-2">
          {title || '의안 제목 없음'}
        </h3>
        <p className="text-sm text-slate-600 leading-relaxed line-clamp-3 flex-1 mb-4">
          {description || '의안 요약이 제공되지 않았습니다.'}
        </p>
        <a
          href={`/bills/${id}`} // id is bill.bill_id from BillList
          className="mt-auto px-4 py-2 text-sm font-medium text-blue-600 border border-blue-600 rounded-lg hover:bg-blue-50 transition-colors duration-200 text-center"
        >
          의안 보기
        </a>
      </div>
    </div>
  );
};

export default BillCard;=== ./frontend/src/components/CategoryChart.js ===

import React from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const CategoryChart = ({ data, title = "카테고리별 감성 분석" }) => {
  if (!data || data.length === 0) {
    return (
      <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
        <p className="text-gray-500">표시할 카테고리 데이터가 없습니다.</p>
      </div>
    );
  }

  // Transform data for the chart
  const chartData = data.map(item => ({
    category: item.category_name || item.name,
    positive: item.positive_count || 0,
    neutral: item.neutral_count || 0,
    negative: item.negative_count || 0,
    avg_sentiment: item.avg_sentiment || 0
  }));

  const CustomTooltip = ({ active, payload, label }) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload;
      return (
        <div className="bg-white p-4 border border-gray-200 shadow-lg rounded">
          <p className="font-medium mb-2">{label}</p>
          <div className="space-y-1">
            <p className="text-sm text-green-600">
=== ./frontend/src/components/CategoryFilter.js ===

import React, { useState, useEffect } from 'react';
import api from '../api';

const CategoryFilter = ({ onCategoryChange, selectedCategories = [] }) => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [expandedCategories, setExpandedCategories] = useState(new Set());

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const response = await api.get('/categories/');
      setCategories(response.data.results || response.data || []);
    } catch (error) {
      console.error('Error fetching categories:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleCategory = (categoryId) => {
    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(categoryId)) {
      newExpanded.delete(categoryId);
    } else {
      newExpanded.add(categoryId);
=== ./frontend/src/components/RecentChanges.js ===
import React, { useState, useEffect } from 'react';
import ChangeArticle from './ChangeArticle';

const RecentChanges = () => {
  const [changes, setChanges] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchChanges = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/bills/?ordering=-updated_at&page_size=3');
        if (!response.ok) throw new Error('최근 변화를 불러오는데 실패했습니다.');
        const data = await response.json();
        setChanges(data.results || []);
      } catch (err) {
        setError(err.message);
        console.error('Error fetching recent changes:', err);
      } finally {
        setLoading(false);
      }
    };
    fetchChanges();
  }, []);

  if (loading) {
    return (
      <section className="py-20 bg-gray-50">
        <div className="container mx-auto px-4">
=== ./frontend/src/components/StatementList.js ===

import React, { useState, useEffect } from 'react';
import api from '../api';

const StatementList = ({ filters = {} }) => {
  const [statements, setStatements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pagination, setPagination] = useState({});
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    fetchStatements();
  }, [filters, currentPage]);

  const fetchStatements = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        page: currentPage,
        ...filters
      });
      
      const response = await api.get(`/api/statements/?${params}`);
      setStatements(response.data.results || []);
      setPagination({
        count: response.data.count,
        next: response.data.next,
        previous: response.data.previous
      });
    } catch (error) {
=== ./frontend/src/components/DataRefreshButton.js ===

import React, { useState } from 'react';
import api from '../api';

const DataRefreshButton = ({ onRefreshStart, onRefreshComplete }) => {
  const [refreshing, setRefreshing] = useState(false);
  const [lastRefresh, setLastRefresh] = useState(null);

  const handleRefresh = async (force = false) => {
    try {
      setRefreshing(true);
      if (onRefreshStart) onRefreshStart();

      const response = await api.post('/api/data/refresh/', { 
        force: force,
        debug: false 
      });

      console.log('Refresh response:', response.data);
      setLastRefresh(new Date());
      
      if (onRefreshComplete) onRefreshComplete();
      
      alert('데이터 갱신이 시작되었습니다. 완료까지 시간이 걸릴 수 있습니다.');
    } catch (error) {
      console.error('Error refreshing data:', error);
      alert('데이터 갱신 중 오류가 발생했습니다.');
    } finally {
      setRefreshing(false);
    }
=== ./frontend/src/components/BillList.js ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../api';

const BillList = ({ filter }) => {
  const [bills, setBills] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [pagination, setPagination] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const navigate = useNavigate();

  useEffect(() => {
    fetchBills();
  }, [filter, currentPage]);

  const fetchBills = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        page: currentPage
      });

      if (filter && filter !== 'all') {
        params.append('name', filter);
      }

      const response = await api.get(`/api/bills/?${params}`);
      setBills(response.data.results || response.data);
      setPagination({
=== ./frontend/src/components/PartyCard.js ===

import React from 'react';

const PartyCard = ({ id, image, title, subtitle, description }) => {
  return (
    <div className="flex overflow-hidden flex-col flex-1 shrink p-6 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 basis-0 min-w-64 max-md:max-w-full">
      <div className="flex flex-col items-center text-center">
        <div className="w-16 h-16 rounded-full mb-4 bg-blue-100 flex items-center justify-center">
          <span className="text-blue-600 font-bold text-lg">
            {title ? title.charAt(0) : '정'}
          </span>
        </div>
        <h3 className="text-xl font-bold text-slate-800 mb-2">
          {title}
        </h3>
        {subtitle && (
          <p className="text-sm font-medium text-blue-600 mb-3">
            {subtitle}
          </p>
        )}
        <p className="text-sm text-slate-600 leading-relaxed line-clamp-3">
          {description || '정당 정보가 제공되지 않았습니다.'}
        </p>
        <a
          href={`/parties/${id}`}
          className="mt-4 px-4 py-2 text-sm font-medium text-blue-600 border border-blue-600 rounded-lg hover:bg-blue-50 transition-colors duration-200"
        >
          자세히 보기
        </a>
      </div>
=== ./frontend/src/components/MeetingCard.js ===
import React from 'react';

// Props are assumed to be passed from a Session object:
// id: session.conf_id
// cmit_nm: session.cmit_nm (위원회명)
// conf_knd: session.conf_knd (회의종류)
// conf_dt: session.conf_dt (회의일자)
// description prop is removed as Session model has no summary/description
const MeetingCard = ({ id, cmit_nm, conf_knd, conf_dt, title }) => {
  const formatDate = (dateString) => {
    if (!dateString) return '날짜 미정';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ko-KR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch {
      return dateString; // Return original string if formatting fails
    }
  };

  // Construct title from cmit_nm and conf_knd
  const meetingTitle = [cmit_nm, conf_knd].filter(Boolean).join(' - ') || '회의 정보 없음';

  return (
    <div className="flex overflow-hidden flex-col flex-1 shrink p-6 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-200 basis-0 min-w-64 max-md:max-w-full">
      <div className="flex flex-col h-full">
        <div className="flex items-center gap-2 mb-3">
=== ./frontend/src/components/SentimentChart.js ===
import React from 'react';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';

const SentimentChart = ({ data }) => {
  // Transform data for the chart
  const processChartData = () => {
    const dataArray = Array.isArray(data) ? data : 
                     (data?.data && Array.isArray(data.data)) ? data.data : 
                     (data?.results && Array.isArray(data.results)) ? data.results : [];

    if (dataArray.length === 0) return [];

    return dataArray.map(item => ({
      date: item.date || item.session?.conf_dt || 'Unknown',
      sentiment: parseFloat(item.sentiment_score || 0),
      speaker: item.speaker?.naas_nm || 'Unknown Speaker'
    }));
  };

  const chartData = processChartData();

=== ./frontend/src/index.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
=== ./frontend/src/pages/SpeakerDetail.js ===
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import api from '../api';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SentimentChart from '../components/SentimentChart';

function SpeakerDetail() {
  const { id } = useParams();
  const [speaker, setSpeaker] = useState(null);
  const [statements, setStatements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [timeRange, setTimeRange] = useState('all'); // 'all', 'month', 'year'

  useEffect(() => {
    const fetchSpeakerData = async () => {
      try {
        setLoading(true);
        const [speakerRes, statementsRes] = await Promise.all([
          api.get(`api/speakers/${id}/`),
          api.get(`speakers/${id}/statements/?time_range=${timeRange}`)
        ]);

        setSpeaker(speakerRes.data);
        setStatements(statementsRes.data);
      } catch (err) {
        setError('데이터를 불러오는 중 오류가 발생했습니다.');
        console.error('Error fetching speaker data:', err);
      } finally {
=== ./frontend/src/pages/BillList.js ===
import React, { useState } from 'react';
import NavigationHeader from '../components/NavigationHeader';
import HeroSection from '../components/HeroSection';
import BillList from '../components/BillList';
import RecentChanges from '../components/RecentChanges';
import DataMetrics from '../components/DataMetrics';
import Footer from '../components/Footer';
import api from '../api';
import { ENDPOINTS } from '../apiConfig';

const BillListPage = () => {
  const [currentFilter, setCurrentFilter] = useState('all');

  const handleFilterChange = (filter) => {
    setCurrentFilter(filter);
  };

  return (
    <div className="relative pt-20 bg-white">
      <NavigationHeader />
      <main>
        <HeroSection onFilterChange={handleFilterChange} />
        <BillList filter={currentFilter} />
        <RecentChanges />
        <DataMetrics />
      </main>
      <Footer />
    </div>
  );
};
=== ./frontend/src/pages/SpeakerList.js ===

import React, { useState, useEffect } from 'react';
import api from '../api';
import { ENDPOINTS } from '../apiConfig';
import { Link } from 'react-router-dom';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';

function SpeakerList() {
  const [speakers, setSpeakers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filters, setFilters] = useState({
    name: '',
    party: '',
    constituency: '',
    era_co: ''
  });

  useEffect(() => {
    fetchSpeakers();
    // eslint-disable-next-line
  }, [page, filters]);

  const fetchSpeakers = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
=== ./frontend/src/pages/StatementList.js ===

import React, { useState } from 'react';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import StatementList from '../components/StatementList';
import DataRefreshButton from '../components/DataRefreshButton';

const StatementListPage = () => {
  const [filters, setFilters] = useState({});
  const [refreshKey, setRefreshKey] = useState(0);

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
  };

  const handleRefreshComplete = () => {
    setRefreshKey(prev => prev + 1);
  };

  return (
    <div className="relative pt-20 bg-gray-50 min-h-screen">
      <NavigationHeader />
      
      <main className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">국회 발언 분석</h1>
          <p className="text-gray-600">
            국회의원들의 발언을 감성 분석과 함께 확인할 수 있습니다.
          </p>
        </div>
=== ./frontend/src/pages/SessionList.js ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../api';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SessionCard from '../components/SessionCard';

const SessionList = () => {
  const [sessions, setSessions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [pagination, setPagination] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const navigate = useNavigate();

  useEffect(() => {
    fetchSessions();
  }, [currentPage]);

  const fetchSessions = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        page: currentPage
      });

      const response = await api.get(`/api/sessions/?${params}`);
      setSessions(response.data.results || response.data);
      setPagination({
        count: response.data.count,
=== ./frontend/src/pages/SessionDetail.js ===
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SentimentChart from '../components/SentimentChart';

function SessionDetail() {
  const { id } = useParams();
  const [session, setSession] = useState(null);
  const [statements, setStatements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchSessionData = async () => {
      try {
        setLoading(true);
        const [sessionRes, statementsRes] = await Promise.all([
          axios.get(`/api/sessions/${id}/`),
          axios.get(`/api/sessions/${id}/statements/`)
        ]);

        setSession(sessionRes.data);
        setStatements(Array.isArray(statementsRes.data) ? statementsRes.data : []);
      } catch (err) {
        setError('데이터를 불러오는 중 오류가 발생했습니다.');
        console.error('Error fetching session data:', err);
      } finally {
        setLoading(false);
=== ./frontend/src/pages/PartyDetail.js ===
import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import api from '../api';
import { Link } from 'react-router-dom';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SentimentChart from '../components/SentimentChart';

function PartyDetail() {
  const { id } = useParams();
  const [party, setParty] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [timeRange, setTimeRange] = useState('all'); // 'all', 'month', 'year'
  const [sortBy, setSortBy] = useState('sentiment'); // 'sentiment', 'statements', 'bills'

  useEffect(() => {
    fetchPartyData();
  }, [id, timeRange, sortBy, fetchPartyData]);

  const fetchPartyData = async (fetchAdditional = false) => {
    try {
      setLoading(true);
      const params = new URLSearchParams({
        time_range: timeRange,
        sort_by: sortBy
      });
      if (fetchAdditional) {
        params.append('fetch_additional', 'true');
      }
=== ./frontend/src/pages/PartyList.js ===
import React, { useState, useEffect } from 'react';
import api from '../api';
import { Link } from 'react-router-dom';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SentimentChart from '../components/SentimentChart';
import CategoryChart from '../components/CategoryChart';
import CategoryFilter from '../components/CategoryFilter';

function PartyList() {
  const [parties, setParties] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [timeRange, setTimeRange] = useState('all');
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [categoryData, setCategoryData] = useState([]);
  const [showCategoryFilter, setShowCategoryFilter] = useState(false);

  useEffect(() => {
    fetchParties();
    fetchCategoryData();
  }, [timeRange, selectedCategories]);

  const fetchParties = async (fetchAdditional = false) => {
    try {
      setLoading(true);
      setError(null);

      const params = new URLSearchParams({ time_range: timeRange });
      if (selectedCategories.length > 0) {
=== ./frontend/src/pages/Home.js ===
import React, { useEffect, useState } from 'react';
import NavigationHeader from '../components/NavigationHeader';
import HeroSection from '../components/HeroSection';
import ContentSection from '../components/ContentSection';
import Footer from '../components/Footer';
import PartyCard from '../components/PartyCard';
import MeetingCard from '../components/MeetingCard';
import BillCard from '../components/BillCard';
import api from '../api'; // Import the axios instance
import { ENDPOINTS } from '../apiConfig'; // Import endpoint paths

const Home = () => {
  const [parties, setParties] = useState([]);
  const [meetings, setMeetings] = useState([]);
  const [bills, setBills] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null); // Clear previous errors

        const [partyRes, meetingRes, billRes] = await Promise.all([
          api.get(ENDPOINTS.PARTIES, { params: { page_size: 4 } }),
          api.get(ENDPOINTS.SESSIONS, { params: { page_size: 3 } }),
          api.get(ENDPOINTS.BILLS, { params: { page_size: 3 } }),
        ]);

=== ./frontend/src/pages/SentimentAnalysis.js ===

import React from 'react';
import SentimentDashboard from '../components/SentimentDashboard';

const SentimentAnalysis = () => {
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">감성 분석 대시보드</h1>
          <p className="mt-2 text-gray-600">
            국회 발언의 감성 분석 결과를 종합적으로 확인할 수 있습니다.
          </p>
        </div>
        
        <SentimentDashboard />
      </div>
    </div>
  );
};

export default SentimentAnalysis;
import React, { useState, useEffect } from 'react';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SentimentDashboard from '../components/SentimentDashboard';

function SentimentAnalysis() {
  const [activeTab, setActiveTab] = useState('overall');
  const [parties, setParties] = useState([]);
=== ./frontend/src/pages/BillDetail.js ===

import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import NavigationHeader from '../components/NavigationHeader';
import Footer from '../components/Footer';
import SentimentChart from '../components/SentimentChart';

function BillDetail() {
  const { id } = useParams();
  const [bill, setBill] = useState(null);
  const [statements, setStatements] = useState([]);
  const [votingSentiment, setVotingSentiment] = useState(null);
  const [sentimentAnalysis, setSentimentAnalysis] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchBillData = async () => {
      try {
        setLoading(true);
        
        // Handle potential missing data gracefully
        const [billRes, statementsRes] = await Promise.all([
          axios.get(`/api/bills/${id}/`),
          axios.get(`/api/bills/${id}/statements/`)
        ]);

        setBill(billRes.data);
        
=== ./frontend/src/App.js ===
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import './App.css';

// Pages
import Home from './pages/Home';
import PartyList from './pages/PartyList';
import PartyDetail from './pages/PartyDetail';
import SessionList from './pages/SessionList';
import SessionDetail from './pages/SessionDetail';
import BillList from './pages/BillList';
import BillDetail from './pages/BillDetail';
import SpeakerList from './pages/SpeakerList';
import SpeakerDetail from './pages/SpeakerDetail';
import SentimentAnalysis from './pages/SentimentAnalysis';
import StatementList from './pages/StatementList';

function App() {
  return (
    <Router>
      <div className="App">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/parties" element={<PartyList />} />
          <Route path="/parties/:id" element={<PartyDetail />} />
          <Route path="/sessions" element={<SessionList />} />
          <Route path="/sessions/:id" element={<SessionDetail />} />
          <Route path="/bills" element={<BillList />} />
          <Route path="/bills/:id" element={<BillDetail />} />
          <Route path="/speakers" element={<SpeakerList />} />
=== ./frontend/node_modules/@testing-library/react/dist/@testing-library/react.esm.js ===
import * as testUtils from 'react-dom/test-utils';
import * as React from 'react';
import ReactDOM from 'react-dom';
import * as ReactDOMClient from 'react-dom/client';
import { fireEvent as fireEvent$1, configure, prettyDOM, getQueriesForElement } from '@testing-library/dom';
export * from '@testing-library/dom';

const domAct = testUtils.act;

function getGlobalThis() {
  /* istanbul ignore else */
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }
  /* istanbul ignore next */


  if (typeof self !== 'undefined') {
    return self;
  }
  /* istanbul ignore next */


  if (typeof window !== 'undefined') {
    return window;
  }
  /* istanbul ignore next */


  if (typeof global !== 'undefined') {
=== ./frontend/node_modules/@testing-library/react/dist/@testing-library/react.pure.esm.js ===
import * as React from 'react';
import ReactDOM from 'react-dom';
import * as ReactDOMClient from 'react-dom/client';
import { fireEvent as fireEvent$1, configure, prettyDOM, getQueriesForElement } from '@testing-library/dom';
export * from '@testing-library/dom';
import * as testUtils from 'react-dom/test-utils';

const domAct = testUtils.act;

function getGlobalThis() {
  /* istanbul ignore else */
  if (typeof globalThis !== 'undefined') {
    return globalThis;
  }
  /* istanbul ignore next */


  if (typeof self !== 'undefined') {
    return self;
  }
  /* istanbul ignore next */


  if (typeof window !== 'undefined') {
    return window;
  }
  /* istanbul ignore next */


  if (typeof global !== 'undefined') {
  